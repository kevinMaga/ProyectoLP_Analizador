Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABSTRACT
    AND
    AND_LOGICAL
    AND_WORD
    ARRAY
    AS
    BREAK
    CALLABLE
    CASE
    CATCH
    CLASS
    CLONE
    CLOSEINTER
    COMENTARIO_LINEA
    COMENTARIO_MULTILINEA
    COMENTARIO_SHELL
    DECLARE
    DECREMENT
    DEFAULT
    DELIM_FIN
    DELIM_INICIO
    DIE
    DIVIDE
    DIVIDE_ASSIGN
    DOBLEPUNTO
    ECHO
    ELSE
    ELSEIF
    EMPTY
    ENDFOR
    ENDFOREACH
    ENDIF
    ENDSWITCH
    ENDWHILE
    EQUAL
    EVAL
    EXIT
    EXTENDS
    FINAL
    FINALLY
    FN
    FOR
    FOREACH
    FUNCTION
    GLOBAL
    GOTO
    GREATER_EQUAL
    IDENTICAL
    IF
    IGUAL
    IMPLEMENTS
    INCLUDE
    INCREMENT
    INSTANCEOF
    INSTEADOF
    INTERFACE
    ISSET
    LESS_EQUAL
    LIST
    LLLAVE
    LPAREN
    MATCH
    MAYOR
    MENOR
    MENOR_MAYOR
    MINUS
    MINUS_ASSIGN
    MOD
    MODULO_ASSIGN
    NEW
    NOT_EQUAL
    NOT_IDENTICAL
    NOT_LOGICAL
    NUMERAL
    OR
    OR_LOGICAL
    OR_WORD
    PLUS
    PLUS_ASSIGN
    PRINT
    PRIVATE
    PROTECTED
    PUBLIC
    PUNTO
    PUNTOYCOMA
    REQUIRE
    RETURN
    RLLAVE
    RPAREN
    STATIC
    SWITCH
    THROW
    TIMES
    TIMES_ASSIGN
    TRAIT
    TRY
    UNSET
    USE
    VAR
    VARIABLE
    VIRGULILLA
    WHILE
    XOR
    XOR_WORD
    YIELD
    YIELD_FROM

Grammar

Rule 0     S' -> lista
Rule 1     lista -> LBRACKET elementos RBRACKET
Rule 2     elementos -> elemento
Rule 3     elementos -> elementos COMA elemento
Rule 4     elemento -> valor
Rule 5     elemento -> lista
Rule 6     elemento -> clave_valor
Rule 7     clave_valor -> valor ARROW valor
Rule 8     valor -> NUMBER
Rule 9     valor -> FLOAT
Rule 10    valor -> STRING
Rule 11    valor -> BOOLEAN

Terminals, with rules where they appear

ABSTRACT             : 
AND                  : 
AND_LOGICAL          : 
AND_WORD             : 
ARRAY                : 
ARROW                : 7
AS                   : 
BOOLEAN              : 11
BREAK                : 
CALLABLE             : 
CASE                 : 
CATCH                : 
CLASS                : 
CLONE                : 
CLOSEINTER           : 
COMA                 : 3
COMENTARIO_LINEA     : 
COMENTARIO_MULTILINEA : 
COMENTARIO_SHELL     : 
DECLARE              : 
DECREMENT            : 
DEFAULT              : 
DELIM_FIN            : 
DELIM_INICIO         : 
DIE                  : 
DIVIDE               : 
DIVIDE_ASSIGN        : 
DOBLEPUNTO           : 
ECHO                 : 
ELSE                 : 
ELSEIF               : 
EMPTY                : 
ENDFOR               : 
ENDFOREACH           : 
ENDIF                : 
ENDSWITCH            : 
ENDWHILE             : 
EQUAL                : 
EVAL                 : 
EXIT                 : 
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLOAT                : 9
FN                   : 
FOR                  : 
FOREACH              : 
FUNCTION             : 
GLOBAL               : 
GOTO                 : 
GREATER_EQUAL        : 
IDENTICAL            : 
IF                   : 
IGUAL                : 
IMPLEMENTS           : 
INCLUDE              : 
INCREMENT            : 
INSTANCEOF           : 
INSTEADOF            : 
INTERFACE            : 
ISSET                : 
LBRACKET             : 1
LESS_EQUAL           : 
LIST                 : 
LLLAVE               : 
LPAREN               : 
MATCH                : 
MAYOR                : 
MENOR                : 
MENOR_MAYOR          : 
MINUS                : 
MINUS_ASSIGN         : 
MOD                  : 
MODULO_ASSIGN        : 
NEW                  : 
NOT_EQUAL            : 
NOT_IDENTICAL        : 
NOT_LOGICAL          : 
NUMBER               : 8
NUMERAL              : 
OR                   : 
OR_LOGICAL           : 
OR_WORD              : 
PLUS                 : 
PLUS_ASSIGN          : 
PRINT                : 
PRIVATE              : 
PROTECTED            : 
PUBLIC               : 
PUNTO                : 
PUNTOYCOMA           : 
RBRACKET             : 1
REQUIRE              : 
RETURN               : 
RLLAVE               : 
RPAREN               : 
STATIC               : 
STRING               : 10
SWITCH               : 
THROW                : 
TIMES                : 
TIMES_ASSIGN         : 
TRAIT                : 
TRY                  : 
UNSET                : 
USE                  : 
VAR                  : 
VARIABLE             : 
VIRGULILLA           : 
WHILE                : 
XOR                  : 
XOR_WORD             : 
YIELD                : 
YIELD_FROM           : 
error                : 

Nonterminals, with rules where they appear

clave_valor          : 6
elemento             : 2 3
elementos            : 1 3
lista                : 5 0
valor                : 4 7 7

Parsing method: LALR

state 0

    (0) S' -> . lista
    (1) lista -> . LBRACKET elementos RBRACKET

    LBRACKET        shift and go to state 2

    lista                          shift and go to state 1

state 1

    (0) S' -> lista .



state 2

    (1) lista -> LBRACKET . elementos RBRACKET
    (2) elementos -> . elemento
    (3) elementos -> . elementos COMA elemento
    (4) elemento -> . valor
    (5) elemento -> . lista
    (6) elemento -> . clave_valor
    (8) valor -> . NUMBER
    (9) valor -> . FLOAT
    (10) valor -> . STRING
    (11) valor -> . BOOLEAN
    (1) lista -> . LBRACKET elementos RBRACKET
    (7) clave_valor -> . valor ARROW valor

    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    LBRACKET        shift and go to state 2

    elementos                      shift and go to state 3
    elemento                       shift and go to state 4
    valor                          shift and go to state 5
    lista                          shift and go to state 6
    clave_valor                    shift and go to state 7

state 3

    (1) lista -> LBRACKET elementos . RBRACKET
    (3) elementos -> elementos . COMA elemento

    RBRACKET        shift and go to state 12
    COMA            shift and go to state 13


state 4

    (2) elementos -> elemento .

    RBRACKET        reduce using rule 2 (elementos -> elemento .)
    COMA            reduce using rule 2 (elementos -> elemento .)


state 5

    (4) elemento -> valor .
    (7) clave_valor -> valor . ARROW valor

    RBRACKET        reduce using rule 4 (elemento -> valor .)
    COMA            reduce using rule 4 (elemento -> valor .)
    ARROW           shift and go to state 14


state 6

    (5) elemento -> lista .

    RBRACKET        reduce using rule 5 (elemento -> lista .)
    COMA            reduce using rule 5 (elemento -> lista .)


state 7

    (6) elemento -> clave_valor .

    RBRACKET        reduce using rule 6 (elemento -> clave_valor .)
    COMA            reduce using rule 6 (elemento -> clave_valor .)


state 8

    (8) valor -> NUMBER .

    ARROW           reduce using rule 8 (valor -> NUMBER .)
    RBRACKET        reduce using rule 8 (valor -> NUMBER .)
    COMA            reduce using rule 8 (valor -> NUMBER .)


state 9

    (9) valor -> FLOAT .

    ARROW           reduce using rule 9 (valor -> FLOAT .)
    RBRACKET        reduce using rule 9 (valor -> FLOAT .)
    COMA            reduce using rule 9 (valor -> FLOAT .)


state 10

    (10) valor -> STRING .

    ARROW           reduce using rule 10 (valor -> STRING .)
    RBRACKET        reduce using rule 10 (valor -> STRING .)
    COMA            reduce using rule 10 (valor -> STRING .)


state 11

    (11) valor -> BOOLEAN .

    ARROW           reduce using rule 11 (valor -> BOOLEAN .)
    RBRACKET        reduce using rule 11 (valor -> BOOLEAN .)
    COMA            reduce using rule 11 (valor -> BOOLEAN .)


state 12

    (1) lista -> LBRACKET elementos RBRACKET .

    $end            reduce using rule 1 (lista -> LBRACKET elementos RBRACKET .)
    RBRACKET        reduce using rule 1 (lista -> LBRACKET elementos RBRACKET .)
    COMA            reduce using rule 1 (lista -> LBRACKET elementos RBRACKET .)


state 13

    (3) elementos -> elementos COMA . elemento
    (4) elemento -> . valor
    (5) elemento -> . lista
    (6) elemento -> . clave_valor
    (8) valor -> . NUMBER
    (9) valor -> . FLOAT
    (10) valor -> . STRING
    (11) valor -> . BOOLEAN
    (1) lista -> . LBRACKET elementos RBRACKET
    (7) clave_valor -> . valor ARROW valor

    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11
    LBRACKET        shift and go to state 2

    elemento                       shift and go to state 15
    valor                          shift and go to state 5
    lista                          shift and go to state 6
    clave_valor                    shift and go to state 7

state 14

    (7) clave_valor -> valor ARROW . valor
    (8) valor -> . NUMBER
    (9) valor -> . FLOAT
    (10) valor -> . STRING
    (11) valor -> . BOOLEAN

    NUMBER          shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    BOOLEAN         shift and go to state 11

    valor                          shift and go to state 16

state 15

    (3) elementos -> elementos COMA elemento .

    RBRACKET        reduce using rule 3 (elementos -> elementos COMA elemento .)
    COMA            reduce using rule 3 (elementos -> elementos COMA elemento .)


state 16

    (7) clave_valor -> valor ARROW valor .

    RBRACKET        reduce using rule 7 (clave_valor -> valor ARROW valor .)
    COMA            reduce using rule 7 (clave_valor -> valor ARROW valor .)

