
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AND AND_LOGICAL AND_WORD ARRAY ARROW AS BOOLEAN BREAK CALLABLE CASE CATCH CLASS CLONE CLOSEINTER COMA COMENTARIO_LINEA COMENTARIO_MULTILINEA COMENTARIO_SHELL DECLARE DECREMENT DEFAULT DELIM_FIN DELIM_INICIO DIE DIVIDE DIVIDE_ASSIGN DOBLEPUNTO ECHO ELSE ELSEIF EMPTY ENDFOR ENDFOREACH ENDIF ENDSWITCH ENDWHILE EQUAL EVAL EXIT EXTENDS FINAL FINALLY FLOAT FN FOR FOREACH FUNCTION GLOBAL GOTO GREATER_EQUAL IDENTICAL IF IGUAL IMPLEMENTS INCLUDE INCREMENT INSTANCEOF INSTEADOF INTERFACE ISSET LBRACKET LESS_EQUAL LIST LLLAVE LPAREN MATCH MAYOR MENOR MENOR_MAYOR MINUS MINUS_ASSIGN MOD MODULO_ASSIGN NEW NOT_EQUAL NOT_IDENTICAL NOT_LOGICAL NUMBER NUMERAL OR OR_LOGICAL OR_WORD PLUS PLUS_ASSIGN PRINT PRIVATE PROTECTED PUBLIC PUNTO PUNTOYCOMA RBRACKET REQUIRE RETURN RLLAVE RPAREN STATIC STRING SWITCH THROW TIMES TIMES_ASSIGN TRAIT TRY UNSET USE VAR VARIABLE VIRGULILLA WHILE XOR XOR_WORD YIELD YIELD_FROM\n    lista : LBRACKET elementos RBRACKET\n    \n    elementos : elemento\n              | elementos COMA elemento\n    \n    elemento : valor\n             | lista\n             | clave_valor\n    \n    clave_valor : valor ARROW valor\n    \n    valor : NUMBER\n          | FLOAT\n          | STRING\n          | BOOLEAN\n    '
    
_lr_action_items = {'LBRACKET':([0,2,13,],[2,2,2,]),'$end':([1,12,],[0,-1,]),'NUMBER':([2,13,14,],[8,8,8,]),'FLOAT':([2,13,14,],[9,9,9,]),'STRING':([2,13,14,],[10,10,10,]),'BOOLEAN':([2,13,14,],[11,11,11,]),'RBRACKET':([3,4,5,6,7,8,9,10,11,12,15,16,],[12,-2,-4,-5,-6,-8,-9,-10,-11,-1,-3,-7,]),'COMA':([3,4,5,6,7,8,9,10,11,12,15,16,],[13,-2,-4,-5,-6,-8,-9,-10,-11,-1,-3,-7,]),'ARROW':([5,8,9,10,11,],[14,-8,-9,-10,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'lista':([0,2,13,],[1,6,6,]),'elementos':([2,],[3,]),'elemento':([2,13,],[4,15,]),'valor':([2,13,14,],[5,5,16,]),'clave_valor':([2,13,],[7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> lista","S'",1,None,None,None),
  ('lista -> LBRACKET elementos RBRACKET','lista',3,'p_lista','Sintactico_analizador.py',10),
  ('elementos -> elemento','elementos',1,'p_elementos','Sintactico_analizador.py',17),
  ('elementos -> elementos COMA elemento','elementos',3,'p_elementos','Sintactico_analizador.py',18),
  ('elemento -> valor','elemento',1,'p_elemento','Sintactico_analizador.py',28),
  ('elemento -> lista','elemento',1,'p_elemento','Sintactico_analizador.py',29),
  ('elemento -> clave_valor','elemento',1,'p_elemento','Sintactico_analizador.py',30),
  ('clave_valor -> valor ARROW valor','clave_valor',3,'p_clave_valor','Sintactico_analizador.py',37),
  ('valor -> NUMBER','valor',1,'p_valor','Sintactico_analizador.py',44),
  ('valor -> FLOAT','valor',1,'p_valor','Sintactico_analizador.py',45),
  ('valor -> STRING','valor',1,'p_valor','Sintactico_analizador.py',46),
  ('valor -> BOOLEAN','valor',1,'p_valor','Sintactico_analizador.py',47),
]
